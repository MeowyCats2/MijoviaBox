{
  "version": 3,
  "sources": ["..\\..\\client.ts"],
  "sourcesContent": [
    "const endpoint = \"https://discord.com/api/webhooks/\"\nconst send_file = async (blob: Blob, name: string) => {\n  const formData = new FormData();\n  formData.append('payload_json', JSON.stringify({}));\n  formData.append('file', blob, name);\n  const response = await fetch(location.protocol + \"//\" + location.host + \"/send\", {\n      method: 'POST',\n      body: formData\n  });\n  return await response.json();\n}\n\n(document.getElementById(\"fileUpload\") as HTMLInputElement).addEventListener(\"change\", async e => {\n  try {\n    const file = (e.target as HTMLInputElement).files![0]\n    const iv = crypto.getRandomValues(new Uint8Array(16))\n    const key = await crypto.subtle.generateKey({'name': 'AES-CBC', 'length': 256}, true, ['encrypt', 'decrypt']);\n    const encrypted = new Blob([new Uint8Array(await crypto.subtle.encrypt({ 'name': 'AES-CBC', iv}, key!, await file.arrayBuffer()))])\n    const parts = []\n    document.getElementById(\"percentage\")!.textContent = \"Starting...\";\n    document.getElementById(\"shareLinks\")!.hidden = true;\n    for (let i = 0; i < encrypted.size; i += 1000 * 1000 * 9) {\n        console.log(i)\n        const res = await send_file(encrypted.slice(i, i + 1000 * 1000 * 9), \"data.bin\")\n        parts.push(res.id)\n        document.getElementById(\"percentage\")!.textContent = i / encrypted.size * 100 + \"%\"\n    }\n    const message = await send_file(new Blob([JSON.stringify({\n        type: \"file\",\n        name: window.btoa(String.fromCharCode(...new Uint8Array(await crypto.subtle.encrypt({ 'name': 'AES-CBC', iv}, key!, (new TextEncoder()).encode(file.name))))),\n        parts: parts,\n        iv: [...iv]\n    })]), \"file.json\");\n    console.log(message);\n    document.getElementById(\"shareLinks\")!.hidden = false;\n    const contents = window.btoa(JSON.stringify({\n      fileId: message.id,\n      key: await crypto.subtle.exportKey(\"jwk\", key)\n    })).replace(/=/g, \"\");\n    document.getElementById(\"percentage\")!.textContent = \"Finished!\";\n    (document.getElementById(\"indirectURL\") as HTMLAnchorElement).href = location.origin + \"/file/\" + contents\n    document.getElementById(\"indirectURL\")!.textContent = (document.getElementById(\"indirectURL\") as HTMLAnchorElement).href;\n    (document.getElementById(\"directURL\") as HTMLAnchorElement).href = location.origin + \"/direct/\" + contents\n    document.getElementById(\"directURL\")!.textContent = (document.getElementById(\"directURL\") as HTMLAnchorElement).href\n  } catch (e) {\n    document.getElementById(\"percentage\")!.textContent = \"An error occured!\";\n    throw e;\n  }\n});\n\ndocument.getElementById(\"uploadLabel\")!.addEventListener(\"keyup\", e => {\n  if (e.key === 'Enter') {\n    document.getElementById(\"fileUpload\")!.click();\n  }\n})\n\nconst retrieve = async (fileId: string, keyObject: any) => {\n  const metadataURL = (await (await fetch(\"/retrieve/\" + fileId)).json()).attachments[0].url\n  const metadata = await (await fetch(\"/cdn-proxy?url=\" + encodeURIComponent(metadataURL))).json()\n  console.log(metadata)\n  document.getElementById(\"percentage\")!.textContent = \"Starting...\";\n  const blobs = []\n  for (const [index, partId] of metadata.parts.entries()) {\n    const partURL = (await (await fetch(\"/retrieve/\" + partId)).json()).attachments[0].url\n    blobs.push(await (await fetch(\"/cdn-proxy?url=\" + encodeURIComponent(partURL))).blob())\n    document.getElementById(\"percentage\")!.textContent = (index + 1) / metadata.parts.length * 100 + \"%\";\n  }\n  const encrypted = new Blob(blobs)\n  const key = await crypto.subtle.importKey(\"jwk\", keyObject, {'name': 'AES-CBC', 'length': 256}, true, ['encrypt', 'decrypt'])\n  const blob = new Blob([new Uint8Array(await crypto.subtle.decrypt({ 'name': 'AES-CBC', 'iv': new Uint8Array(metadata.iv)}, key!, await encrypted.arrayBuffer()))])\n  const url = URL.createObjectURL(blob)\n  const aElem = document.createElement(\"a\")\n  aElem.href = url\n  aElem.download = (new TextDecoder()).decode(await crypto.subtle.decrypt({ 'name': 'AES-CBC', 'iv': new Uint8Array(metadata.iv)}, key!, Uint8Array.from(window.atob(metadata.name), c => c.charCodeAt(0))))\n  aElem.click()\n  setTimeout(() => URL.revokeObjectURL(url))\n}\n\nif (location.href.includes(\"/file/\")) {\n  let data = null;\n  try {\n    data = JSON.parse(window.atob(location.href.split(\"/file/\")[1].split(\"/\")[0]));\n  } catch (e) {\n    document.getElementById(\"percentage\")!.textContent = \"Not a valid URL!\";\n    console.error(e);\n  }\n  try {\n    if (data) await retrieve(data.fileId, data.key);\n  } catch (e) {\n    document.getElementById(\"percentage\")!.textContent = \"An error occured!\";\n    throw e;\n  }\n};"
  ],
  "mappings": "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",
  "debugId": "326BDE9F927749E764756E2164756E21",
  "names": []
}